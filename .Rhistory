g1 <- graph_irf(g1, steps, DGS1, lower_DGS1, upper_DGS1)
g2 <- graph_irf(g2, steps, DGS5, lower_DGS5, upper_DGS5)
g3 <- graph_irf(g3, steps, DGSTEN, lower_DGSTEN, upper_DGSTEN)
patches <- plot_spacer() + free(g1, type = "space", side = "l") +
g2 + g3
patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Yields"), theme = theme(plot.title = element_text(size = 14)) &
theme(text = element_text('serif')))
ggsave(paste0(file_name, "_irf.png"), patches)
}
#Stages the graphing sequence for the three term premiums
staging_tps <- function(data, type, title, steps, file_name){
g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
g2 <- as.data.frame(cbind(data %>% select(contains(type[[2]])), steps))
g3 <- as.data.frame(cbind(data %>% select(contains(type[[3]])), steps))
g1 <- graph_irf(g1, steps, ACMTP01, lower_ACMTP01, upper_ACMTP01)
g2 <- graph_irf(g2, steps, ACMTP05, lower_ACMTP05, upper_ACMTP05)
g3 <- graph_irf(g3, steps, ACMTP10, lower_ACMTP10, upper_ACMTP10)
patches <- plot_spacer() + free(g1, type = "space", side = "l") +
g2 + g3
patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Premiums"), theme = theme(plot.title = element_text(size = 14)) &
theme(text = element_text('serif')))
ggsave(paste0(file_name, "_irf.png"), patches)
}
bmat <- amat <- diag(1, 10, 10)
config <- function(x){
for(i in 1:nrow(x)){
r <- 1
repeat{
if(x[i, r] == 1){
break
}
x[i, r] <- NA
r <- r + 1
}
}
return(x)
}
amat <- config(amat)
amat[3, c(1, 2)] <- 0
amat[4, 3] <- 0
amat[6, c(3, 5)] <- 0
amat[c(7:10), c(1:2, 4)] <- 0
bmat <- replace(bmat, bmat == 1, NA)
rm(list = ls())
library(vars)
library(xts)
library(stargazer)
library(forecast)
library(tidyverse)
library(lubridate)
library(tseries)
library(knitr)
library(patchwork)
library(latticeExtra)
library(TTR)
library(urca)
library(kableExtra)
library(webshot2)
library(chromote)
library(magick)
library(stringi)
Sys.setenv(CHROMOTE_CHROME = "C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")
data <- read.csv("~/GitHub/Data/master_thesis_data/base_data.csv")
corps <- read.csv("~/GitHub/Data/master_thesis_data/corporate_profits_join.csv")
CPI <- read.csv("~/GitHub/Data/macro_datasets/cpi_employment.csv")
# I wrangle the convert object that has the CPI values in it and calculate the conversion
# Converting to 2013 dollars
CPI <- CPI %>%
mutate(dates = as.Date(dates, "%m/%d/%Y"),
conversion = CPI/234.1) %>%
select(-c(X))
# I mutate the dates to easily merge the conversion rates, corps, and main dataset
data <- data %>%
mutate(dates = as.Date(dates))
corps <- corps %>%
mutate(dates = as.Date(dates))
data <- merge(data, corps)
data <- merge(data, CPI)
#Adjusting the data object for inflation here and calculate the real gdp growth and
#the real debt to gdp ratio
data <- data %>%
mutate_at(vars(2:7, 19:22, 28, 30:35), ~.*conversion) %>%
mutate(debt_GDP = (public_debt / gdp)) %>%
filter(dates >= "1966-01-01")
#Calculates Second differences
change <- function(x){
return(x - 2*lag(x) + lag(x, 2))
}
main <- data
original <- data
# First Difference
main[,  c(2:8, 19:22, 26:35, 37:38)] <- as.data.frame(apply(main[, c(2:8, 19:22, 26:35, 37:38)], 2, function(x) log(x) - lag(log(x))))
# Second Difference this is like the difference in the growth rates
data[,  c(2:8, 19:22, 26:35, 37:38)] <- as.data.frame(apply(data[, c(2:8, 19:22, 26:35, 37:38)], 2, change))
#Removes NAs from all columns not including the bond, note and bills columns
main <- na.omit(main[, -c(23:25)])
data <- na.omit(data[, -c(23:25)])
rm(list = c("CPI", "corps"))
name_again <- function(x){
return(x %>%
rename("PCE" = pce, "Firm Capital" = firm_capital, "Fed Rate" = DFF,
"US Firm Profit" = Domestic.industries, "Govt Ex" = govt_spending,
"Taxes" = current_taxes, "US Debt" = public_debt, "DGSTEN" = DGS10))
}
main <- name_again(main)
data <- name_again(data)
#First Differences Data Set
main_time <- as.xts(main[, c(14, 27, 6, 29, 2, 20, 22, 9, 11, 13, 15:17)], order.by = main[, c(1)])
#Second Differences Data Set
data_time <- as.xts(data[, c(14, 27, 6,  29, 2, 20, 22, 9, 11, 13, 15:17)], order.by = data[, c(1)])
#Computes the irfs and structures the 95% conf intervals into dataframes
#Names would be order based on the columns after making the dataframe
#So irf Govt Note and irf Govt ACMTP, with Govt being the impulse and ACMTP being response
compute <- function(model, impulse, response, steps){
irfs <- irf(model, impulse = impulse,
response = response, n.ahead = steps,
runs = 1000, ci = 0.95)
names <- c(response,
paste0("lower_", response),
paste0("upper_", response))
naw <- as.data.frame(irfs[c(1:3)])
colnames(naw) <- names
return(naw)
}
#Helps graph the actual IRF
graph_irf <- function(data, steps){
data$steps <- (0:steps)
data <- data[, c(4, 1, 2, 3)]
names <- colnames(data)
colnames(data) <- c("w", "x", "y", "z")
return(ggplot(data, aes(w, x)) +
geom_line(color = "black") +
geom_line(aes(y = y), color = "red", linetype = "dashed") +
geom_line(aes(y = z), color = "red", linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "solid", color = "red", size = 2) +
labs(x = names[1], y = names[2]))
}
# make it multiple functional
# include steps cause that column will not be included in compute section
staging <- function(model, impulse, response, steps){
data <- compute(model, impulse, response, steps)
m <- list()
for(i in response){
f <- data %>% select(contains(i))
m <- append(m, list(f))
}
val <- lapply(m, graph_irf, steps)
return(val)
}
#Takes a patchwork object and spits out a specific arrangement
arrangement <- function(patches, deviate, react_var, setwd){
setwd(setwd)
patches <- patches + plot_annotation(title = paste0("Impulsing ", deviate, " on ", react_var),
theme = theme(plot.title = element_text(size = 14)) &
theme(text = element_text('serif')))
ggsave(paste0(deviate, "_", react_var,"_irf.png"), patches)
}
setup <- function(x){
if(x){
patches <- plot_spacer() + free(x[[1]][[1]], type = "space", side = "l") + x[[1]][[2]] + x[[1]][[3]]
}
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
#Stages the graphing sequence for the three yields
#staging <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[2]])), steps))
#  g3 <- as.data.frame(cbind(data %>% select(contains(type[[3]])), steps))
#  g1 <- graph_irf(g1, steps, DGS1, lower_DGS1, upper_DGS1)
#  g2 <- graph_irf(g2, steps, DGS5, lower_DGS5, upper_DGS5)
#  g3 <- graph_irf(g3, steps, DGSTEN, lower_DGSTEN, upper_DGSTEN)
#  patches <- plot_spacer() + free(g1, type = "space", side = "l") +
#      g2 + g3
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Yields"),
#                                      theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#  ggsave(paste0(file_name, "_irf.png"), patches)
#}
#Stages the graphing sequence for the three term premiums
#staging_tps <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[2]])), steps))
#  g3 <- as.data.frame(cbind(data %>% select(contains(type[[3]])), steps))
#  g1 <- graph_irf(g1, steps, ACMTP01, lower_ACMTP01, upper_ACMTP01)
#  g2 <- graph_irf(g2, steps, ACMTP05, lower_ACMTP05, upper_ACMTP05)
#  g3 <- graph_irf(g3, steps, ACMTP10, lower_ACMTP10, upper_ACMTP10)
#  patches <- plot_spacer() + free(g1, type = "space", side = "l") +
#      g2 + g3
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Premiums"),
#                                       theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#  ggsave(paste0(file_name, "_irf.png"), patches)
#}
#staging_sup <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g1 <- graph_irf(g1, steps, Bill)
#  g2 <- graph_irf(g2, steps, Note)
#  patches <- g1 + g2
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Premiums"),
#                                       theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#}
#Computes the irfs and structures the 95% conf intervals into dataframes
#Names would be order based on the columns after making the dataframe
#So irf Govt Note and irf Govt ACMTP, with Govt being the impulse and ACMTP being response
compute <- function(model, impulse, response, steps){
irfs <- irf(model, impulse = impulse,
response = response, n.ahead = steps,
runs = 1000, ci = 0.95)
names <- c(response,
paste0("lower_", response),
paste0("upper_", response))
naw <- as.data.frame(irfs[c(1:3)])
colnames(naw) <- names
return(naw)
}
#Helps graph the actual IRF
graph_irf <- function(data, steps){
data$steps <- (0:steps)
data <- data[, c(4, 1, 2, 3)]
names <- colnames(data)
colnames(data) <- c("w", "x", "y", "z")
return(ggplot(data, aes(w, x)) +
geom_line(color = "black") +
geom_line(aes(y = y), color = "red", linetype = "dashed") +
geom_line(aes(y = z), color = "red", linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "solid", color = "red", size = 2) +
labs(x = names[1], y = names[2]))
}
# make it multiple functional
# include steps cause that column will not be included in compute section
staging <- function(model, impulse, response, steps){
data <- compute(model, impulse, response, steps)
m <- list()
for(i in response){
f <- data %>% select(contains(i))
m <- append(m, list(f))
}
val <- lapply(m, graph_irf, steps)
return(val)
}
#Takes a patchwork object and spits out a specific arrangement
arrangement <- function(patches, deviate, react_var, setwd){
setwd(setwd)
patches <- patches + plot_annotation(title = paste0("Impulsing ", deviate, " on ", react_var),
theme = theme(plot.title = element_text(size = 14)) &
theme(text = element_text('serif')))
ggsave(paste0(deviate, "_", react_var,"_irf.png"), patches)
}
setup <- function(x){
if(x){
patches <- plot_spacer() + free(x[[1]][[1]], type = "space", side = "l") + x[[1]][[2]] + x[[1]][[3]]
}
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
#Stages the graphing sequence for the three yields
#staging <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[2]])), steps))
#  g3 <- as.data.frame(cbind(data %>% select(contains(type[[3]])), steps))
#  g1 <- graph_irf(g1, steps, DGS1, lower_DGS1, upper_DGS1)
#  g2 <- graph_irf(g2, steps, DGS5, lower_DGS5, upper_DGS5)
#  g3 <- graph_irf(g3, steps, DGSTEN, lower_DGSTEN, upper_DGSTEN)
#  patches <- plot_spacer() + free(g1, type = "space", side = "l") +
#      g2 + g3
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Yields"),
#                                      theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#  ggsave(paste0(file_name, "_irf.png"), patches)
#}
#Stages the graphing sequence for the three term premiums
#staging_tps <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[2]])), steps))
#  g3 <- as.data.frame(cbind(data %>% select(contains(type[[3]])), steps))
#  g1 <- graph_irf(g1, steps, ACMTP01, lower_ACMTP01, upper_ACMTP01)
#  g2 <- graph_irf(g2, steps, ACMTP05, lower_ACMTP05, upper_ACMTP05)
#  g3 <- graph_irf(g3, steps, ACMTP10, lower_ACMTP10, upper_ACMTP10)
#  patches <- plot_spacer() + free(g1, type = "space", side = "l") +
#      g2 + g3
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Premiums"),
#                                       theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#  ggsave(paste0(file_name, "_irf.png"), patches)
#}
#staging_sup <- function(data, type, title, steps, file_name){
#  g1 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g2 <- as.data.frame(cbind(data %>% select(contains(type[[1]])), steps))
#  g1 <- graph_irf(g1, steps, Bill)
#  g2 <- graph_irf(g2, steps, Note)
#  patches <- g1 + g2
#  patches <- patches + plot_annotation(title = paste0("Impulsing ", title, " on Premiums"),
#                                       theme = theme(plot.title = element_text(size = 14)) &
#                                       theme(text = element_text('serif')))
#}
bmat <- amat <- diag(1, 10, 10)
config <- function(x){
for(i in 1:nrow(x)){
r <- 1
repeat{
if(x[i, r] == 1){
break
}
x[i, r] <- NA
r <- r + 1
}
}
if(ncol(x) >= 9){
x[5, c(1, 2)] <- 0
x[6, c(3, 4)] <- 0
x[7, c(2, 3, 4)] <- 0
}
return(x)
}
amat <- config(amat)
bmat <- replace(bmat, bmat == 1, NA)
model.1 <- SVAR(VAR(main_time[, -c(8:10)], p = 2, type = "none"), estmethod = "scoring", Amat = amat, Bmat = bmat, max.iter = 1000)
model.2 <- SVAR(VAR(main_time[, -c(11:13)], p = 2, type = "none"), estmethod = "scoring", Amat = amat, Bmat = bmat, max.iter = 1000)
response <- c("DGS1", "DGS5", "DGSTEN")
val <- staging(model.1, "Govt.Ex", response, steps = 25)
las <- staging(model.1, "Taxes", response, steps = 25)
stu <- staging(model.1, "US.Debt", response, steps = 25)
length(val)
setup <- function(x){
if(length(x[[1]]) == 3){
patches <- plot_spacer() + free(x[[1]][[1]], type = "space", side = "l") + x[[1]][[2]] + x[[1]][[3]]
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
else{
patches <- x[[1]][[1]] + x[[1]][[2]]
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
}
sec_count <- read.csv("~/GitHub/2025_master_thesis/securities_count.csv")
sec_count <- sec_count %>%
mutate(other_dates = as.Date(Record.Date)) %>%
filter(Security.Type.Description == "Marketable",
Security.Class.Description %in% c("Bill", "Bond", "Note"),
other_dates > "2006-04-30") %>%
pivot_wider(
names_from = Security.Class.Description,
values_from = Securities.Sold.Count) %>%
arrange(other_dates) %>%
mutate(dates = ceiling_date(as.Date(as.yearqtr(paste0(year(other_dates),"-Q",quarter(other_dates)),
format("%Y-Q%q"), frac = 0)),"quarter")) %>%
select(c("dates", "Bill", "Note")) %>%
group_by(dates) %>%
summarize(
Bill = sum(Bill),
Note = sum(Note)
)
sec_count[, -1] <- as.data.frame(apply(sec_count[, -1], 2, function(x) log(x) - lag(log(x))))
sec_count <- na.omit(sec_count)
m <- as.data.frame(t(sapply(sec_count[,c(2,3)], adf.test)))
kable(m[1, 4])
other <- merge(main, sec_count)
other <- as.xts(other[, c(14, 27, 6, 29, 2, 20, 22, 38, 9, 39, 13)], order.by = other[, c(1)])
amat <- bmat <- diag(1, 7, 7)
amat <- config(amat)
bmat <- replace(bmat, bmat == 1, NA)
#This one includes Note supply and Term premiums for 10 year treasuries
model.3 <- SVAR(VAR(other[,-c(4, 7, 8, 9)], p = 2, type = "none"), estmethod = "scoring", Amat = amat, Bmat = bmat)
#This one includes Bill supply and Term premiums for 1 year treasuries
model.4 <- SVAR(VAR(other[,-c(4, 7, 10, 11)], p = 2, type = "none"), estmethod = "scoring", Amat = amat, Bmat = bmat)
response <- c("Note", "ACMTP10")
val <- staging(model.3, "Govt.Ex", response, steps = 10)
las <- staging(model.3, "Taxes", response, steps = 10)
stu <- staging(model.3, "Note", response, steps = 10)
graphs <- list(list(val, "Govt Ex", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(las, "Taxes", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(stu, "T-Note Supply", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"))
lapply(graphs, setup)
response <- c("Bill", "ACMTP01")
val <- staging(model.4, "Govt.Ex", response, steps = 10)
las <- staging(model.4, "Taxes", response, steps = 10)
stu <- staging(model.4, "Bill", response, steps = 10)
graphs <- list(list(val, "Govt Ex", "1-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(las, "Taxes", "1-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(stu, "T-Note Supply", "1-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"))
lapply(graphs, setup)
setup <- function(x){
if(length(x[[1]]) == 3){
patches <- plot_spacer() + free(x[[1]][[1]], type = "space", side = "l") + x[[1]][[2]] + x[[1]][[3]]
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
else{
patches <- (x[[1]][[1]] + grid::textGrob(' ')) / (x[[1]][[2]] + grid::textGrob(' '))
arrangement(patches, x[[2]], x[[3]], x[[4]])
}
}
lapply(graphs, setup)
response <- c("Note", "ACMTP10")
val <- staging(model.3, "Govt.Ex", response, steps = 10)
las <- staging(model.3, "Taxes", response, steps = 10)
stu <- staging(model.3, "Note", response, steps = 10)
graphs <- list(list(val, "Govt Ex", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(las, "Taxes", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(stu, "T-Note Supply", "10-Year Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"))
lapply(graphs, setup)
response <- c("Bill", "ACMTP01")
val <- staging(model.4, "Govt.Ex", response, steps = 10)
las <- staging(model.4, "Taxes", response, steps = 10)
stu <- staging(model.4, "Bill", response, steps = 10)
graphs <- list(list(val, "Govt Ex", "Bill Supply & Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(las, "Taxes", "Bill Supply & Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"),
list(stu, "Bill Supply", "Bill Supply & Premiums", "~/GitHub/2025_master_thesis/irfs_premiums"))
lapply(graphs, setup)
bmat <- amat <- diag(1, 10, 10)
config <- function(x){
for(i in 1:nrow(x)){
r <- 1
repeat{
if(x[i, r] == 1){
break
}
x[i, r] <- NA
r <- r + 1
}
}
if(ncol(x) >= 9){
x[5, c(1, 2)] <- 0
x[6, c(3, 4)] <- 0
x[7, c(2, 3, 4)] <- 0
}
return(x)
}
amat <- config(amat)
bmat <- replace(bmat, bmat == 1, NA)
View(amat)
View(main_time)
amat <- amat %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7)
amat <- amat %>% as.data.frame()  %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7)
View(amat)
rownames(amat) <- colnames(amat)
View(amat)
bmat <- amat <- diag(1, 10, 10)
config <- function(x){
for(i in 1:nrow(x)){
r <- 1
repeat{
if(x[i, r] == 1){
break
}
x[i, r] <- NA
r <- r + 1
}
}
if(ncol(x) >= 9){
x[5, c(1, 2)] <- 0
x[6, c(3, 4)] <- 0
x[7, c(2, 3, 4)] <- 0
}
return(x)
}
amat <- config(amat)
bmat <- replace(bmat, bmat == 1, NA)
getwd()
amat <- amat %>% as.data.frame()  %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7, `1-Year` = V8,
`5-year` = V9, `10-year` = V10)
rownames(amat) <- colnames(amat)
View(amat)
kbl(amat) %>%
kable_classic(full_width = F, html_font = "Times New Roman") %>%
save_kable("ordering_svar_1.jpeg")
bmat <- amat <- diag(1, 10, 10)
config <- function(x){
for(i in 1:nrow(x)){
r <- 1
repeat{
if(x[i, r] == 1){
break
}
x[i, r] <- NA
r <- r + 1
}
}
if(ncol(x) >= 9){
x[5, c(1, 2)] <- 0
x[6, c(3, 4)] <- 0
x[7, c(2, 3, 4)] <- 0
}
return(x)
}
amat <- config(amat)
bmat <- replace(bmat, bmat == 1, NA)
amat <- amat %>% as.data.frame()  %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7, `1-Year` = V8,
`5-year` = V9, `10-year` = V10) %>%
replace_na(NA, ".")
amat <- amat %>% as.data.frame()  %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7, `1-Year` = V8,
`5-year` = V9, `10-year` = V10) %>%
replace(NA, ".")
amat <- amat %>% as.data.frame()  %>%
rename(`Fed Rate` = V1, `Firm Capital` = V2, `PCE` = V3, `US Firm Profits` = V4,
`Taxes` = V5, `Govt Ex` = V6, `US Public Debt` = V7, `1-Year` = V8,
`5-year` = V9, `10-year` = V10)
amat[is.na(amat)] <- "."
rownames(amat) <- colnames(amat)
kbl(amat) %>%
kable_classic(full_width = F, html_font = "Times New Roman") %>%
save_kable("ordering_svar_1.jpeg")
rm(list=ls())
